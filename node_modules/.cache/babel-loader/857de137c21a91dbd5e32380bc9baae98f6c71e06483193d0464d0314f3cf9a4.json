{"ast":null,"code":"var _jsxFileName = \"/home/Bhuwan/Desktop/delet/text-editor/src/TextInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextInput = () => {\n  _s();\n  const [formStructure, setFormStructure] = useState({\n    form_id: 10,\n    email: '',\n    description: 'Test Form',\n    form_structure: [{\n      type: 'input',\n      title: 'What is your name',\n      name: 'name',\n      is_required: 'true'\n    }, {\n      type: 'radio',\n      title: 'What is your gender',\n      name: 'gender',\n      is_required: 'true',\n      option: ['Male', 'Female']\n    }, {\n      type: 'input',\n      title: 'What is your address',\n      name: 'address',\n      is_required: 'true'\n    }, {\n      type: 'checkboxes',\n      title: 'What is your gender',\n      name: 'gender',\n      is_required: 'true',\n      multi_select: 'true',\n      option: ['checkbox1', 'checkbox2']\n    }]\n  });\n  const removeFormElement = index => {\n    const updatedFormStructure = [...formStructure.form_structure];\n    updatedFormStructure.splice(index, 1);\n    setFormStructure({\n      ...formStructure,\n      form_structure: updatedFormStructure\n    });\n  };\n  const renderFormStructure = () => {\n    return formStructure.form_structure.map((element, index) => {\n      let input;\n      if (element.type === 'input') {\n        input = /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: element.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this);\n      } else if (element.type === 'radio') {\n        input = element.option.map(option => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: element.name,\n            value: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, option, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this));\n      } else if (element.type === 'checkboxes') {\n        input = element.option.map(option => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: element.name,\n            value: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, option, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this));\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-element\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: element.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), input, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => removeFormElement(index),\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const addInputField = () => {\n    const inputField = {\n      type: 'input',\n      title: 'New Input Field',\n      name: 'new_input',\n      is_required: 'true'\n    };\n    setFormStructure({\n      ...formStructure,\n      form_structure: [...formStructure.form_structure, inputField]\n    });\n  };\n  const addRadioField = () => {\n    const radioField = {\n      type: 'radio',\n      title: 'New Radio Field',\n      name: 'new_radio',\n      is_required: 'true',\n      option: ['Option 1', 'Option 2', 'Option 3']\n    };\n    setFormStructure({\n      ...formStructure,\n      form_structure: [...formStructure.form_structure, radioField]\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"form-container\",\n      children: renderFormStructure()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addInputField,\n      children: \"Add Input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addRadioField,\n      children: \"Add Radio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(TextInput, \"R+0BWJBzicnVdAxNE/uiAC+nZw8=\");\n_c = TextInput;\nexport default TextInput;\nvar _c;\n$RefreshReg$(_c, \"TextInput\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TextInput","_s","formStructure","setFormStructure","form_id","email","description","form_structure","type","title","name","is_required","option","multi_select","removeFormElement","index","updatedFormStructure","splice","renderFormStructure","map","element","input","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","children","value","className","onClick","addInputField","inputField","addRadioField","radioField","id","_c","$RefreshReg$"],"sources":["/home/Bhuwan/Desktop/delet/text-editor/src/TextInput.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst TextInput = () => {\n  const [formStructure, setFormStructure] = useState({\n    form_id: 10,\n    email: '',\n    description: 'Test Form',\n    form_structure: [\n      {\n        type: 'input',\n        title: 'What is your name',\n        name: 'name',\n        is_required: 'true',\n      },\n      {\n        type: 'radio',\n        title: 'What is your gender',\n        name: 'gender',\n        is_required: 'true',\n        option: ['Male', 'Female'],\n      },\n      {\n        type: 'input',\n        title: 'What is your address',\n        name: 'address',\n        is_required: 'true',\n      },\n      {\n        type: 'checkboxes',\n        title: 'What is your gender',\n        name: 'gender',\n        is_required: 'true',\n        multi_select: 'true',\n        option: ['checkbox1', 'checkbox2'],\n      },\n    ],\n  });\n\n  const removeFormElement = (index) => {\n    const updatedFormStructure = [...formStructure.form_structure];\n    updatedFormStructure.splice(index, 1);\n    setFormStructure({ ...formStructure, form_structure: updatedFormStructure });\n  };\n\n  const renderFormStructure = () => {\n    return formStructure.form_structure.map((element, index) => {\n      let input;\n\n      if (element.type === 'input') {\n        input = (\n          <input type=\"text\" name={element.name} />\n        );\n      } else if (element.type === 'radio') {\n        input = element.option.map((option) => (\n          <React.Fragment key={option}>\n            <input type=\"radio\" name={element.name} value={option} />\n            <label>{option}</label>\n          </React.Fragment>\n        ));\n      } else if (element.type === 'checkboxes') {\n        input = element.option.map((option) => (\n          <React.Fragment key={option}>\n            <input type=\"checkbox\" name={element.name} value={option} />\n            <label>{option}</label>\n          </React.Fragment>\n        ));\n      }\n\n      return (\n        <div className=\"form-element\" key={index}>\n          <label>{element.title}</label>\n          {input}\n          <button onClick={() => removeFormElement(index)}>Remove</button>\n        </div>\n      );\n    });\n  };\n\n  const addInputField = () => {\n    const inputField = {\n      type: 'input',\n      title: 'New Input Field',\n      name: 'new_input',\n      is_required: 'true',\n    };\n\n    setFormStructure({\n      ...formStructure,\n      form_structure: [...formStructure.form_structure, inputField],\n    });\n  };\n\n  const addRadioField = () => {\n    const radioField = {\n      type: 'radio',\n      title: 'New Radio Field',\n      name: 'new_radio',\n      is_required: 'true',\n      option: ['Option 1', 'Option 2', 'Option 3'],\n    };\n\n    setFormStructure({\n      ...formStructure,\n      form_structure: [...formStructure.form_structure, radioField],\n    });\n  };\n\n  return (\n    <div>\n      <div id=\"form-container\">{renderFormStructure()}</div>\n      <button onClick={addInputField}>Add Input</button>\n      <button onClick={addRadioField}>Add Radio</button>\n    </div>\n  );\n};\n\nexport default TextInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}